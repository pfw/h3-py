from typing import Dict, Iterable, List, Literal, Optional, Set, Tuple

from . import _api

H3Cell = str
H3Edge = str
UnorderedH3Cell = Set[H3Cell]

# Should be no changes in each API file below this line

AreaUnits = Literal['km^2', 'm^2', 'rads^2']
LengthUnits = Literal['km', 'm', 'rads']
Resolution = int
GeoBoundary = Tuple[Tuple[float, float], ...]
KRange = int

def versions() -> Dict[str, str]: ...
def string_to_h3(h: str) -> int: ...
def h3_to_string(x: int) -> str: ...
def num_hexagons(resolution: Resolution) -> int: ...
def hex_area(resolution: Resolution, unit: AreaUnits = 'km^2') -> float: ...
def edge_length(resolution: Resolution, unit: LengthUnits = 'km') -> float: ...
def h3_is_valid(h: H3Cell) -> bool: ...
def h3_unidirectional_edge_is_valid(edge: H3Edge) -> bool: ...
def geo_to_h3(lat: float, lng: float, resolution: Resolution) -> H3Cell: ...
def h3_to_geo(h: H3Cell) -> Tuple[float, float]: ...
def h3_get_resolution(h: H3Cell) -> int: ...
def h3_to_parent(h: H3Cell, res: Optional[Resolution] = None) -> int: ...
def h3_distance(h1: H3Cell, h2: H3Cell) -> int: ...
def h3_to_geo_boundary(h: H3Cell, geo_json: bool = False) -> GeoBoundary: ...
def k_ring(h: H3Cell, k: KRange = 1) -> UnorderedH3Cell: ...
def hex_range(h: H3Cell, k: KRange = 1) -> UnorderedH3Cell: ...
def hex_ring(h: H3Cell, k: KRange = 1) -> UnorderedH3Cell: ...

# TODO: fix these
# I tried a return value of Ordered[Unordered[H3Cell]] but didn't
# work. Have not gotten return values of Generic[Generic] to work
def hex_range_distances(h: H3Cell, K: KRange) -> List[Set[H3Cell]]: ...
def hex_ranges(
    hexes: Iterable[H3Cell], K: KRange
) -> Dict[H3Cell, List[Set[H3Cell]]]: ...
def k_ring_distances(h: H3Cell, K: KRange) -> List[Set[H3Cell]]: ...
def h3_to_children(h: H3Cell, res: Optional[Resolution] = None) -> UnorderedH3Cell: ...
def compact(hexes: Iterable[H3Cell]) -> UnorderedH3Cell: ...
def uncompact(hexes: Iterable[H3Cell], res: Resolution) -> UnorderedH3Cell: ...

# Check this
def h3_set_to_multi_polygon(
    hexes: Iterable[H3Cell], geo_json: bool = False
) -> List[List[Tuple[float, float]]]: ...

# def polyfill_polygon(outer, res, holes=None, lnglat_order=False) -> : ...
#
# def polyfill_geojson(geojson, res) -> : ...

# def polyfill(geojson, res: int, geo_json_conformant=False) -> : ...

def h3_is_pentagon(h: H3Cell) -> bool: ...
def h3_get_base_cell(h: H3Cell) -> int: ...
def h3_indexes_are_neighbors(h1: H3Cell, h2: H3Cell) -> bool: ...
def get_h3_unidirectional_edge(origin: H3Cell, destination: H3Cell) -> H3Edge: ...
def get_origin_h3_index_from_unidirectional_edge(e: H3Edge) -> H3Cell: ...
def get_destination_h3_index_from_unidirectional_edge(e: H3Edge) -> H3Cell: ...
def get_h3_indexes_from_unidirectional_edge(e: H3Edge) -> Tuple[H3Cell, H3Cell]: ...
def get_h3_unidirectional_edges_from_hexagon(origin: H3Cell) -> Set[H3Edge]: ...
def get_h3_unidirectional_edge_boundary(
    edge: H3Edge, geo_json: bool = False
) -> GeoBoundary: ...
def h3_line(start: H3Cell, end: H3Cell) -> List[H3Cell]: ...
def h3_is_res_class_III(h: H3Cell) -> bool: ...
def h3_is_res_class_iii(h: H3Cell) -> bool: ...
def get_pentagon_indexes(resolution: Resolution) -> Set[H3Cell]: ...
def get_res0_indexes() -> Set[H3Cell]: ...
def h3_to_center_child(h: H3Cell, res: Optional[Resolution] = None) -> H3Cell: ...
def h3_get_faces(h: H3Cell) -> Set[int]: ...
def experimental_h3_to_local_ij(origin: H3Cell, h: H3Cell) -> Tuple[int, int]: ...
def experimental_local_ij_to_h3(origin: H3Cell, i: int, j: int) -> H3Cell: ...
def cell_area(h: H3Cell, unit: AreaUnits = 'km^2') -> float: ...
def exact_edge_length(e: H3Edge, unit: LengthUnits = 'km') -> float: ...
def point_dist(
    point1: Tuple[float, float], point2: Tuple[float, float], unit: LengthUnits = 'km'
) -> float: ...
